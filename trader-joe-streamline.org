#+title: Trader Joe v2 Streamline
* Trader Joe Substream
** Constants :Code:

Just some globally available constants we have available

All constants can be accessed in function bodies by reading from the `global` module. Like: `global::foo` to access a constant called foo.

#+begin_src streamline :tangle src/TraderJoe.strm
const FACTORY_ADDRESS = 0x1886D09C9Ade0c5DB822D85D21678Db67B6c2982;
const DEX_LENS_ADDRESS = 0x0A5077D8dc51e27Ad536847b0CF558165BA9AD1b;
const WAVAX_ADDRESS = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;

#+end_src

** Map Modules :Code:
*** Map Events
This module is the start of the data pipeline. It takes a block in, and returns a map containing all of the events we are tracking.

#+begin_src streamline :tangle src/TraderJoe.strm
mfn map_events(BLOCK) {
    let lb_factory_events = #{
        pairs_created: lb_factory::LbPairCreated(BLOCK, [global::FACTORY_ADDRESS]),
        flash_loan_fee_set: lb_factory::FlashLoanFeeSet(BLOCK, [global::FACTORY_ADDRESS]),
        fee_param_set: lb_factory::FeeParametersSet(BLOCK, [global::FACTORY_ADDRESS]),
        ignored_pair_changes: lb_factory::LbPairIgnoredStateChanged(BLOCK, [global::FACTORY_ADDRESS]),
    };

    let lb_pair_events = #{
        swaps: lb_pair::Swap(BLOCK, []),
    };

    #{
        lb_factory: lb_factory_events,
        lb_pair: lb_pair_events,
    }
}
#+end_src

** Store Modules :Code:
*** Store Pairs Created
#+begin_src streamline :tangle src/TraderJoe.strm
sfn pair_count(map_events, s:add) {
    let pairs_created = map_events?.lb_factory?.pairs_created ?? [];

    for pair in pairs_created {
        s.add("pair_count", 1);
    }
}
#+end_src

*** Store Ignored Pairs
#+begin_src streamline :tangle src/TraderJoe.strm
sfn ignored_pairs(map_events, s:set) {
    let pair_changes = map_events?.lb_factory?.ignored_pair_changes ?? [];

    for pair in pair_changes {
        let id = pair.LbPair;
        if pair.ignored {
            s.set(id, true);
        } else {
            s.set(id, false);
        }
    }
}
#+end_src
*** Store Avax Price
#+begin_src streamline :tangle src/TraderJoe.strm
sfn avax_price(map_events,s:set) {
    let swaps = map_events?.lb_pair?.swaps ?? [];
    // todo!
}
#+end_src
** Store Avax Volume
#+begin_src streamline :tangle src/TraderJoe.strm
sfn avax_volume(map_events,s:add) {
    let pairs = map_events?.lb_factory?.pairs_created ?? [];

    for pair in pairs {
        if pair.tokenX == AVAX {
            let amount_in = map_events?.lb_pair.swap.AmountInX;
            let amount_out = map_events?.lb_pair.swap.AmountOutX;
            s.add("AVAX_VOLUME", amount_in);
            s.add("AVAX_VOLUME", amount_out);
        }
        if pair.tokenY == AVAX {
            let amount_in = map_events?.lb_pair.swap.AmountInY;
            let amount_out = map_events?.lb_pair.swap.AmountOutY;
            s.add("AVAX_VOLUME", amount_in);
            s.add("AVAX_VOLUME", amount_out);
        }
    }
}
#+end_src

*** Token Stores
There are a number of token fields we need to index, but we don't want to put them into a single store bc it will blow up.
**** Store Meta
#+begin_src streamline :tangle src/TraderJoe.strm
sfn token_meta(map_events, s:setOnce) {
    let swaps = map_events?.lb_pair?.swaps ?? [];

    for swap in swaps {
        let token = swap.tx_meta.address;
        s.set(token, token.get_token_meta());
    }
}
#+end_src
**** Store Numeric
#+begin_src streamline :tangle src/TraderJoe.strm
sfn token_numeric_data(map_events,s:setOnce) {
    let swaps = map_events?.lb_pair?.swaps ?? [];

    for swap in swaps {
        let token = swap.tx.address;
        // todo!
    }
}
#+end_src
** Sinks
*** Graph Out :Code:
This module is responsible for outputting to the subgraph.

The way this module works is we have an output array, which is responsible for emitting the entity changes to take in the database. So this module is a lot of not interesting code that just updates entities.

However we do use the helper functions in a weird way here. [[*Macro like functions][See macro like functions for reference.]]

**** Helpers
***** create_pair_params
#+begin_src streamline :tangle src/TraderJoe.strm
fn graph_create_pair_params(events) {
    let fees_set = events.lb_factory?.fe_param_set ?? [];

    for fee in fees_set {
        let id = fee.lb_pair;
        this.push(
            update LbPairParameterSet id {
                sender: fee.sender as Address!
                binStep: fee.bin_step as BigInt!
                baseFactor: fee.base_factor as BigInt!
                filterPeriod: fee.filter_period as BigInt!
                decayPeriod: fee.decay_period as BigInt!
                reductionFactor: fee.reduction_factor as BigInt!
                variableFeeControl: fee.variable_fee_control as BigInt!
                protocolShare: fee.protocol_share as BigInt!
                maxVolatilityAccumulated: fee.max_volatility_accumulated as BigInt!
            }
        );
    }
}
#+end_src

***** Update Pair Count
#+begin_src streamline :tangle src/TraderJoe.strm
fn graph_update_pair_count(store) {
    let id = global::FACTORY_ADDRESS;
    let count = store.deltas.len();

    if count > 0 {
        let pair_count = store.deltas[count - 1].new_value;

        this.push(
            update LbFactory id {
                pairCount: count.to_string() as BigInt!
                something: foo as LbPair:Ref
            }
        );
    }
}
#+end_src

***** set_ignored_pairs
#+begin_src streamline :tangle src/TraderJoe.strm
fn graph_set_ignored_pairs(pairs) {
    let pairs = pairs.deltas ?? [];
    for pair in pairs {
        let id = pair.key;
        let value = pair.newValue;
        this.push(
                update LbPair id {
                    ignored: value as Boolean!
                }
        );
    }
}
#+end_src
***** create_tokens
#+begin_src streamline :tangle src/TraderJoe.strm
fn graph_create_tokens(token_meta_deltas) {
    let tokens = token_meta_deltas.deltas;
    for delta in tokens {
        let id = delta.key;
        let meta = delta.new_value;
        this.push(
            new Token id {
                name: meta.name as String
                symbol: meta.symbol as String
                decimals: meta.decimals as String
                totalSupply: meta.totalSupply as String
            }
        );
    }
}
#+end_src
** update_avax_volume
#+begin_src  streamline :tangle src/TraderJoe.strm
fn graph_update_avax_volume(avax_volume) {
    let id = global::FACTORY_ADDRESS;
    let volume = avax_volume.get("AVAX_VOLUME");
    this.push(
        update LbFactory id {
                volumeAVAX: volume as BigInt!
        }
    );
}
#+end_src

** update_usd_volume
#+begin_src  streamline :tangle src/TraderJoe.strm
fn graph_update_usd_volume(avax_volume) {
    let id = global::FACTORY_ADDRESS;
    let volume = avax_volume.get_at("AVAX_VOLUME");
    let avax_price_usd = get_avax_price_usd(WAVAX_ADDRESS);
    let usd_volume = volume * avax_price_usd;
    this.push(
        update LbFactory id {
                volumeUSD: usd_volume as BigInt!
        }
    );
}
#+end_src

**** graph_out
The module required to sink to a subgraph.
Emits a list of entity changes to take in the database.

#+begin_src streamline :tangle src/TraderJoe.strm
mfn graph_out(map_events, pair_count:deltas, ignored_pairs:deltas, token_meta:deltas, avax_volume:get) {
    let output = [];

    output.graph_update_pair_count(pair_count);
    output.graph_create_pair_params(map_events);
    output.graph_set_ignored_pairs(ignored_pairs);
    output.graph_create_tokens(token_meta);
    output.graph_update_avax_volume(avax_volume);
    output.graph_update_usd_volume(avax_volume);

    output
}
#+end_src

** Helpers :Code:
*** get_avax_price_usd
#+begin_src streamline :tangle src/TraderJoe.strm
fn get_avax_price_usd(token) {
    dex_lens::getTokenPriceNative(token , global::DEX_LENS,token) ?? 0
}
#+end_src
*** get_token_meta
Makes the RPC calls ðŸ¤¢ to get the token data. Slow! But at least it's only once.

#+begin_src streamline :tangle src/TraderJoe.strm
fn get_token_meta() {
    let token = this;
    let symbol = erc20::symbol(token) ?? "";
    let name = erc20::name(token) ?? "";
    let decimals = erc20::decimals(token).to_string() ?? "";
    let totalSupply = erc20::totalSupply(token).to_string() ?? "";

    #{
        name: name,
        symbol: symbol,
        decimals: decimals,
        totalSupply: totalSupply
    }
}
#+end_src

* FAQ :Reference:
This area contains questions and answers for them.
** Why is BLOCK written like that?

It's because it's a built in type. So we visually want it to look distinct!
[[*Built-in Types][See: Built-in Types]]

** Whats the deal with `mfn` and `sfn`?
The reason is that I feel it's the simplest syntax to describe what that thing is, without being "magical".

Modules in substreams are super similar to functions, however they are not exactly the same. So we have syntax that reflects this, mfn and sfn is similar to fn. However it tells us that this function is a Map module (mfn) or a Store module (sfn).

** How can I figure out what types are available?
[[*Built-in Types][See: Built-in Types]]
** Where are these modules being created?
[[*ABIS][See: ABIS]]
** Where does the schema come from?
[[*Subgraph Schema][See: Subgraph Schema]]
** Where are the config files?

With Streamline, one design goal is to avoid writing needless config files. This is because config files:

1. Are often not needed

   We can do a lot of what a config file is doing by just analyzing the source code directly. In Streamline, we automate as much of these steps as possible, without sacrificing expressivity.

2. Config files can get out of sync with your written program and introduce bugs.

   By having our configuration be a function of our source program, we can eliminate an entire class of bugs that stem from mismatches between configuration files and their usage. This means you will never have your subgraph blow up because you used a field that doesn't exist, or was spelled wrong in your program.

3. Force you to define your program before it's done

   This is a stylistic choice, but personally when I am doing something difficult. The program I am building grows from an initial idea, and changes quite a bit during the development process.
   As such I think that good tools allow you to figure out what you are building dynamically. Which is why I have chosen to build this as a feature of the language.

** What does it mean when a function is called like foo!()
[[*Macro like functions][See: Macro like functions]]

* Language Reference
** Built-in Types
Streamline has some built in types, these are some of them!
*** BLOCK
This represents a literal ethereum block. This is the source of most substreams.

**** Methods:
#+begin_src streamline :tangle no
// Returns the Block Number
fn number(self) -> uint;
// Returns a list of the logs in the block
fn logs(self) -> Log[]
#+end_src

*** CLOCK
This represents a clock. It's pretty cool.

**** Methods:

** ABIS
By default, Streamline looks for a `./abis/` directory to load in the files from.

If they are found, they are automatically included in the runtime. This adds almost no runtime overhead because of how the rhai interpreter works. However it does slow down compilation a bit.

For each of the abis found in the abi dir, there is a new globally available module created. Read for the contents of the module.
*** Extracting Events

For each event in the abi json, a function is defined with the same name that allows for us to extract the events of that type from a block.

The signature looks like:
#+begin_src streamline :tangle no
fn <EVENT_NAME>(BLOCK) -> Event[]
fn <EVENT_NAME>(BLOCK, ADDRESS_LIST) -> Event[]
#+end_src

Params:
- Block: An Ethereum Block
- ADDRESS_LIST: A list of addresses to extract events from. If it is empty, skip filtering and grab all matching events of that type, regardless of the emitting address.

Optionally, you can also call this function with a single param of the block. This does the same thing as calling the function with an empty address list.

** Subgraph Schema
The subgraph schema is dynamically generated from the usage of the entity syntax.

This might seem kind of weird because it is very different. And you don't have to use this feature if you don't want to. But it does unlock a lot nice things that make me suggest it, as well as eliminate an entire class of annoying bugs.

[[*Where are the config files?][See: Where are the config files?]]

** TODO Macro like functions
Most of the time, streamline functions are pure. Meaning they have no side effects. But we can modify how functions operate by calling them with a bang at the end. We visually show this with the ! syntax.

What this does is calls the function, with the scope of the caller.

This means that any function can modify and mutate values that are present where we are calling the function from.

We refer to these are macro like functions, because they operate as though the function body was expanded inline to where it was called.

_!!!THIS IS A TERRIBLE IDEA IN ALMOST EVERY SITUATION!!!_

The one exception I have found is to manage complexity in the graph_out function.

We need to modify a single array called `outputs`, and as such it's nice to have access to that directly, and not have to pass a setter or something.

So please think twice before using this feature! You have been warned!

*** TODO Include Examples
