const FACTORY_ADDRESS = 0x1886D09C9Ade0c5DB822D85D21678Db67B6c2982;
const DEX_LENS_ADDRESS = 0xf450749aeA1c5feF27Ae0237C56FecC43f6bE244;
const WAVAX_ADDRESS = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;

// -----------------------
// Map Modules
// -----------------------

mfn map_events(BLOCK) {
    let lb_factory_events = #{
        pairs_created: lb_factory::LbPairCreated(BLOCK, [global::FACTORY_ADDRESS]),
        flash_loan_fee_set: lb_factory::FlashLoanFeeSet(BLOCK, [global::FACTORY_ADDRESS]),
        fee_param_set: lb_factory::FeeParametersSet(BLOCK, [global::FACTORY_ADDRESS]),
        ignored_pair_changes: lb_factory::LbPairIgnoredStateChanged(BLOCK, [global::FACTORY_ADDRESS]),
    };

    let lb_pair_events = #{
        swaps: lb_pair::Swap(BLOCK, []),
        flash_loans: lb_pair::FlashLoan(BLOCK, []),
        composition_fee: lb_pair::CompositionFee(BLOCK, []),
        liquidity_added: lb_pair::DepositedToBin(BLOCK, []),
        liquidity_removed: lb_pair::WithdrawnFromBin(BLOCK, []),
        fees_collected: lb_pair::FeesCollected(BLOCK, []),
        protocol_fees_collected: lb_pair::ProtocolFeesCollected(BLOCK, []),
        transfer_single: lb_pair::TransferSingle(BLOCK, []),
        transfer_batch: lb_pair::TransferBatch(BLOCK, []),
    };

    #{
        lb_factory: lb_factory_events,
        lb_pair: lb_pair_events,
    }
}

mfn lb_pairs(map_events) {
    let pairs_created = map_events?.lb_factory?.pairs_created ?? [];

    let output = [];
    for pair in pairs_created {
        let pair_address = pair.lb_pair;
        let result = pair_address.lb_pair_rpc_calls();
        let base_fee_gwei = (uint(result.bin_step) * uint(result.base_factor));
        // TODO Add percentage
        let base_fee_percentage = "todo()";

        output.push(
            #{
                pair_address: pair_address,
                token_x: pair.token_x,
                token_y: pair.token_y,
                bin_step: pair.bin_step,
                base_fee: base_fee_gwei,
                base_fee_percentage: base_fee_percentage
            } + result
        );
    }

    output
}

mfn pair_swaps(map_events, lb_pair_data:get, token_meta:get) {
    let swaps = map_events?.lb_pair?.swaps;

    let output = [];

    for swap in swaps {
        let lb_token = swap.tx_meta.address;
        let pair_data = lb_pair_data.get(lb_token);
        let for_y = swap.swap_for_y;

        if pair_data.type_of() == "()" {
            pair_data = lb_token.debug_token_data();
        }

        let token_in;
        let token_out;

        if for_y {
            token_in = pair_data.token_x;
            token_out = pair_data.token_y;
        } else {
            token_in = pair_data.token_y;
            token_out = pair_data.token_x;
        }

        let meta = #{
            input: token_in.get_token_meta(),
            out: token_out.get_token_meta(),
        };

        let input_decimals = meta.input.decimals.parse_int();

        let amountIn = swap.amount_in;//.parse_units(input_decimals);
        let amountOut = swap.amount_out;//.parse_units(meta.out.decimals.parse_int());
        let fees = swap.fees.parse_units(input_decimals);

        let amount_x;
        let amount_y;

        if for_y {
            amount_x = amountIn;
            amount_y = `-${amountOut}`;
        } else {
            amount_x = `-${amountIn}`;
            amount_y = amountOut;
        }

        output.push(
            #{
                bin_id: swap.id,
                pair: swap.tx_meta.address,
                fees: fees,
                token_in: token_in,
                token_out: token_out,
                token_x: swap.token_x,
                token_y: swap.token_y,
                from: swap.tx_meta.from,
                amount_x: amount_x,
                amount_y: amount_y,
                minted: 0,
                burned: 0,
                for_y: for_y,
            }
        );
    }

    if output.len() > 0 {
        return output;
    }
}

mfn bin_changes(map_events, token_prices:get, pair_reserves:get, lb_pair_data:get) {
    let output = [];
    let changes = [];

    for change in changes {
        let pair = change.pair;
        let pair_data = lb_pair_data.get(pair);
        output.push(
            #{
                pair: pair,
                bin_id: change.id,
                reserve_x: pair_reserves.get(`${pair}:x`),
                reserve_y: pair_reserves.get(`${pair}:y`),
                price_x: token_prices.get(`${pair_data.token_x}`),
                price_y: token_prices.get(`${pair_data.token_y}`),
            }
        );
    }

    output
}

mfn graph_out(CLOCK, map_events, pair_count:deltas, ignored_pairs:deltas, token_meta:deltas, avax_volume:get, lb_pairs, tx_counts:deltas, pair_swaps, pair_reserves:deltas, pair_volume:deltas, user_count:deltas, unique_users:deltas, token_prices:deltas, bin_total_supply:deltas, bin_reserves:deltas) {
    let output = [];

    // Create the lb pairs
    output.graph_create_lb_pairs(lb_pairs, CLOCK);

    // Create the user entities
    output.graph_create_users(unique_users);

    // Add the user counts
    output.graph_update_user_count(user_count);

    // Update the factory pair counts
    output.graph_update_pair_count(pair_count);

    output.graph_create_pair_params(map_events);
    // Add any ignored pairs
    output.graph_set_ignored_pairs(ignored_pairs);

    // Create the tokens
    output.graph_create_tokens(token_meta);

    // Update the tx counts for the tokens
    output.graph_update_tx_counts(tx_counts);

    // Update the pair reserves
    output.graph_update_pair_reserves(pair_reserves);

    // Update the pair volumes
    output.graph_update_pair_volume(pair_volume);

    // Update the pair prices
    output.graph_update_token_prices(token_prices);

    // Update the bin data
    output.graph_update_bin_data(bin_reserves, bin_total_supply);

    output
}

// -----------------------
// Store Modules
// -----------------------

method store_tx_counts(getter, pair) {
    let pair_data = getter.get(pair) ?? pair.debug_token_data();
    this.add(`p:${pair}`, 1);
    this.add(`f:${global::FACTORY_ADDRESS}`, 1);
    if type_of(pair_data.token_x) != "()" {
        this.add(`t:${pair_data.token_x}`, 1);
    } else {
        debug(`Pair: ${pair} found to not have a token_x, is it an LbPair?`);
    }
    if type_of(pair_data.token_y) != "()" {
        this.add(`t:${pair_data.token_y}`, 1);
    } else {
        debug(`Pair: ${pair} found to not have a token_y, is it an LbPair?`);
    }
}

// note that we use the x and y key to store the pair address, and if the token was x or y
method store_derived_prices(getter, pair) {
    let pair_data = getter.get(pair) ?? pair.debug_token_data();
    let avax_price_usd = get_avax_price_usd();

    if type_of(pair_data.token_x) != "()" {
        let native_price = get_price_native(pair_data.token_x);
        let usd_price = uint(native_price) * avax_price_usd;
        let prices = #{
            native: native_price.to_string(),
            usd_price: usd_price.to_string(),
            x: pair,
        };
        this.set(pair_data.token_x, prices);
    } else {
        debug(`Pair: ${pair} found to not have a token_x, is it an LbPair?`);
    }
    if type_of(pair_data.token_y) != "()" {
        let native_price = get_price_native(pair_data.token_y);
        let usd_price = uint(native_price) * avax_price_usd;
        let prices = #{
            native: native_price.to_string(),
            usd_price: usd_price.to_string(),
            y: pair,
        };
        this.set(pair_data.token_y, prices);
    } else {
        debug(`Pair: ${pair} found to not have a token_y, is it an LbPair?`);
    }
}

// Here we use a prefix to determine what kind of tx count we are setting, so we can update the right entities
sfn tx_counts(map_events, lb_pair_data:get, s:add) {
    // get all lb pair events
    let pair_events = map_events.lb_pair.values().reduce(|acc| this + acc, []);
    for event in pair_events {
        s.store_tx_counts(lb_pair_data, event.tx_meta.address);
    }
}

sfn token_prices(map_events, lb_pair_data:get, s:set) {
    // get all lb pair events
    let pair_events = map_events.lb_pair.values().reduce(|acc| this + acc, []);

    let addresses = #{};
    for event in pair_events {
        let addr = event.tx_meta.address;
        if addr in addresses {
            continue;
        } else {
            s.store_derived_prices(lb_pair_data, addr);
            addresses[addr] = true;
        }
    }
}

sfn pair_count(map_events, s:add) {
    let pairs_created = map_events?.lb_factory?.pairs_created ?? [];

    for pair in pairs_created {
        s.add("pair_count", 1);
    }
}

sfn bin_reserves(pair_swaps, s:add) {
    for swap in pair_swaps ?? [] {
        let bin = `${swap.pair}#${swap.bin_id}`;
        s.add(`${bin}:x`, swap.amount_x);
        s.add(`${bin}:y`, swap.amount_y);
    }
}

sfn bin_total_supply(pair_swaps, s:add) {
    for swap in pair_swaps ?? [] {
        let bin = `${swap.pair}#${swap.bin_id}`;
        if swap.minted != swap.burned {
            let change = swap.minted - swap.burned;
            s.add(bin, uint(change));
        }
    }
}

sfn ignored_pairs(map_events, s:set) {
    let pair_changes = map_events?.lb_factory?.ignored_pair_changes ?? [];

    for pair in pair_changes {
        let id = pair.LbPair;
        if pair.ignored {
            s.set(id, true);
        } else {
            s.set(id, false);
        }
    }
}

sfn avax_price(map_events,s:set) {
    let swaps = map_events?.lb_pair?.swaps ?? [];
    // todo!
}

sfn avax_volume(map_events,s:add) {
    // let pairs = map_events?.lb_factory?.pairs_created ?? [];

    // for pair in pairs {
    //     if pair.tokenX == AVAX {
    //         let amount_in = map_events?.lb_pair.swap.AmountInX;
    //         let amount_out = map_events?.lb_pair.swap.AmountOutX;
    //         s.add("AVAX_VOLUME", amount_in);
    //         s.add("AVAX_VOLUME", amount_out);
    //     }
    //     if pair.tokenY == AVAX {
    //         let amount_in = map_events?.lb_pair.swap.AmountInY;
    //         let amount_out = map_events?.lb_pair.swap.AmountOutY;
    //         s.add("AVAX_VOLUME", amount_in);
    //         s.add("AVAX_VOLUME", amount_out);
    //     }
    // }
}

sfn token_meta(map_events, s:setOnce) {
    let swaps = map_events?.lb_pair?.swaps ?? [];

    for swap in swaps {
        let factory = swap.tx_meta.address;

        let token = address(lb_pair::tokenX(factory));
        s.set(token, #{ factory: factory } + token.get_token_meta());

        let token = address(lb_pair::tokenY(factory));
        s.set(token, #{ factory: factory } + token.get_token_meta());
    }
}

sfn token_numeric_data(map_events,s:setOnce) {
    let swaps = map_events?.lb_pair?.swaps ?? [];

    for swap in swaps {
        let token = swap.tx.address;
        // todo!
    }
}

sfn lb_pair_data(lb_pairs, s:setOnce) {
    for data in lb_pairs {
        s.set(data.pair_address,
              #{
                token_x: data.token_x,
                token_y: data.token_y,
              });
    }
}

sfn pair_reserves(pair_swaps, s:add) {
    for swap in pair_swaps ?? [] {
        let id = `${swap.pair}:x`;
        s.add(id, swap.amount_x);

        let id = `${swap.pair}:y`;
        s.add(id, swap.amount_y);
    }
}

sfn pair_volume(pair_swaps, s:add) {
    for swap in pair_swaps ?? [] {
        let id = `${swap.pair}:x`;
        // remove the negative
        let amount = swap.amount_x;
        amount.replace("-", "");
        s.add(id, amount);

        let id = `${swap.pair}:y`;
        let amount = swap.amount_y;
        amount.replace("-", "");
        s.add(id, amount);
    }
}

sfn unique_users(map_events, s:setOnce) {
    let swaps = map_events?.lb_pair?.swaps ?? [];

    for swap in swaps {
        let user = swap.tx_meta.from;
        s.set(user, true);
    }
}

sfn user_count(unique_users:deltas, s:add) {
    let deltas = unique_users.deltas ?? [];

    for delta in deltas {
        let operation = delta.operation;
        if operation == 1 {
            s.add("USER_COUNT", 1);
        }
    }
}

sfn pair_addresses(map_events, s:setOnce) {
    let pairs_created = map_events?.lb_factory?.pairs_created ?? [];

    for p in pairs_created {
        s.set(p.lb_pair, true);
    }
}

// -----------------------
// General Helper Methods
// -----------------------

method parse_units(decimals) {
    let str = this.to_string();

    if str.len() < decimals {
        let diff = decimals - str.len();
        let pad = "";
        for i in 0..diff {
            pad += "0";
        }

        `0.${pad}${str}`
    } else {
        let diff = str.len() - decimals;
        let split = str.split(diff);
        `${split[0]}.${split[1]}`
    }
}
method lb_pair_rpc_calls() {
        let address = this;
        let reserves = lb_pair::getReservesAndId(address);
        let fee_params = lb_pair::feeParameters(address);
        #{
            bin_step: fee_params[0].to_string(),
            base_factor: fee_params[1].to_string(),
            active_id: reserves[2].to_string(),
        }
}
method get_token_meta() {
    let token = this;
    let symbol = erc20::symbol(token) ?? "";
    let name = erc20::name(token) ?? "";
    let decimals = erc20::decimals(token).to_string() ?? "";
    let totalSupply = erc20::totalSupply(token).to_string() ?? "";

    #{
        name: name,
        symbol: symbol,
        decimals: decimals,
        totalSupply: totalSupply
    }
}
method debug_token_data() {
    let token = this;
    let token_x = lb_pair::tokenX(token) ?? "";
    let token_y = lb_pair::tokenY(token) ?? "";
    #{
        token_x: address(token_x),
        token_y: address(token_y),
    }
}
method get_last() {
    let length = this.len();
    if length > 0 {
        return this[length - 1];
    }
}

// -----------------------
// General Helper Functions
// -----------------------
fn get_price_native(token) {
    dex_lens::getTokenPriceNative(token , global::DEX_LENS_ADDRESS) ?? 0
}
fn get_price_usd(token) {
    dex_lens::getTokenPriceUSD(token , global::DEX_LENS_ADDRESS) ?? 0
}
fn get_avax_price_usd() {
    let token = global::WAVAX_ADDRESS;
    get_price_usd(token)
}


// -----------------------
// SUBGRAPH ENTITY METHODS
// -----------------------

method graph_create_pair_params(events) {
    let fees_set = events.lb_factory?.fe_param_set ?? [];

    for fee in fees_set {
        let id = fee.lb_pair;
        this.push(
            update LbPairParameterSet id {
                sender: fee.sender as Address!
                binStep: fee.bin_step as BigInt!
                baseFactor: fee.base_factor as BigInt!
                filterPeriod: fee.filter_period as BigInt!
                decayPeriod: fee.decay_period as BigInt!
                reductionFactor: fee.reduction_factor as BigInt!
                variableFeeControl: fee.variable_fee_control as BigInt!
                protocolShare: fee.protocol_share as BigInt!
                maxVolatilityAccumulated: fee.max_volatility_accumulated as BigInt!
            }
        );
    }
}
method graph_create_events(events, timestamp) {
    let list = events.lb_pair.liquidity_added;
    for i in 0..list.len() {
        let event = list[i];
        this.graph_create_mint(event, i, timestamp);
    }
}
method graph_create_mint(event, index, timestamp) {
    let tx_hash = event.tx_meta.hash;
    let id = `${tx_hash}#${index}`;
    this.push(
        new Mint id {
            transaction: tx_hash as Transaction:Ref
            timestamp: timestamp as BigInt
            lbPair: event.tx_meta.address as LbPair:Ref
            sender: event.sender as Address
            recipient: event.receipient as Address
            amountX: event.amount_x as BigInt
            amountY: event.amount_x as BigInt
            origin: event.tx_meta.from as Address
            logIndex: event.tx_meta.log_index as BigInt
        }
    );
}
method graph_create_burn(event, index, timestamp) {
    let tx_hash = event.tx_meta.hash;
    let id = `${tx_hash}#${index}`;
    this.push(
        new Burn id {
            transaction: tx_hash as Transaction:Ref
            timestamp: timestamp as BigInt
            lbPair: event.tx_meta.address as LbPair:Ref
            sender: event.sender as Address
            recipient: event.receipient as Address
            amountX: event.amount_x as BigInt
            amountY: event.amount_x as BigInt
            origin: event.tx_meta.from as Address
            logIndex: event.tx_meta.log_index as BigInt
        }
    );
}
method graph_create_swap(event, index, timestamp) {
    let tx_hash = event.tx_meta.hash;
    let id = `${tx_hash}#${index}`;
    let x_in = 0;
    let x_out = 0;
    let y_in = 0;
    let y_out = 0;
    let fees_x = 0;
    let fees_y = 0;
    if event.swap_for_y {
        x_in = event.amountIn;
        y_out = event.amountOut;
        fees_x = event.fees;
    } else {
        x_out = event.amountOut;
        y_in = event.amountIn;
        fees_y = event.fees;
    }
    this.push(
        new Swap id {
            transaction: tx_hash as Transaction:Ref
            timestamp: timestamp as BigInt
            lbPair: event.tx_meta.address as LbPair:Ref
            sender: event.sender as Address
            recipient: event.receipient as Address
            activeId: event.id as BigInt

            amountXIn: x_in as BigInt
            amountXOut: x_out as BigInt
            amountYIn: y_in as BigInt
            amountYOut: y_out as BigInt

            feesX: fees_x as BigInt
            feesY: fees_y as BigInt

            origin: event.tx_meta.from as Address
            logIndex: event.tx_meta.log_index as BigInt
        }
    );
}
method graph_create_flash(event, index, timestamp) {
    let tx_hash = event.tx_meta.hash;
    let id = `${tx_hash}#${index}`;
    this.push(
        new FlashLoan id {
            transaction: tx_hash as Transaction:Ref
            timestamp: timestamp as BigInt
            lbPair: event.tx_meta.address as LbPair:Ref
            sender: event.sender as Address
            recipient: event.receipient as Address

            token: event.token as Token:Ref

            amount: event.amount as BigInt

            fees: fees as BigInt

            origin: event.tx_meta.from as Address
            logIndex: event.tx_meta.log_index as BigInt
        }
    );
}
method graph_create_collect(event, index, timestamp) {
    let tx_hash = event.tx_meta.hash;
    let id = `${tx_hash}#${index}`;
    this.push(
        new Collect id {
            transaction: tx_hash as Transaction:Ref
            timestamp: timestamp as BigInt
            lbPair: event.tx_meta.address as LbPair:Ref
            sender: event.sender as Address
            recipient: event.receipient as Address

            amountX: event.amount_x as BigInt
            amountY: event.amount_y as BigInt

            fees: fees as BigInt

            origin: event.tx_meta.from as Address
            logIndex: event.tx_meta.log_index as BigInt
        }
    );
}
method graph_create_transfer(event, index, timestamp, special_kind) {
    let tx_hash = event.tx_meta.hash;
    let id = `${tx_hash}#${index}`;
    let is_batch = false;
    let is_mint = false;
    let is_burn = false;
    let batch_index;

    if special_kind.starts_with("batch") {
        is_batch = true;
        let split = special_kind.split(":");
        batch_index = kind[1];
        id = `${id}#${batch_index}`;
    }

    switch special_kind {
        "mint" => {
            is_mint = true;
        }
        "burn" => {
            is_burn = true;
        }
    }

    this.push(
        new Transfer id {
            transaction: tx_hash as Transaction:Ref
            timestamp: timestamp as BigInt

            isBatch: event.is_batch
            lbPair: event.tx_meta.address as LbPair:Ref
            sender: event.sender as Address
            recipient: event.receipient as Address
            binId: event.id as BigInt
            isMint: is_mint as Boolean
            isBurn: is_mint as Boolean
            isBatch: is_mint as Boolean
            batchIndex: batch_index as BigInt

            amount: event.amount as BigInt

            origin: event.tx_meta.from as Address
            logIndex: event.tx_meta.log_index as BigInt
        }
    );
}
method graph_create_tokens(token_meta_deltas) {
    let tokens = token_meta_deltas.deltas;
    for delta in tokens {
        let id = delta.key;
        let meta = delta.new_value;
        this.push(
            new Token id {
                name: meta.name as String
                symbol: meta.symbol as String
                decimals: meta.decimals as BigInt
                totalSupply: meta.totalSupply as BigInt
                txCount: 0 as BigInt
                factory: meta.factory as LbFactory:Ref
            }
        );
    }
}
method graph_create_lb_pairs(lb_pairs, clock) {
    let pairs = lb_pairs ?? [];

    for p in pairs {
        let id = p.pair_address;
        this.push(
            new LbPair id {
                tokenX: p.token_x as Token:Ref
                tokenXAddress: p.token_x as String
                tokenYAddress: p.token_y as String
                tokenY: p.token_y as Token:Ref
                binStep: p.bin_step as String
                activeId: p.active_id as String
                reserveX: 0 as BigInt
                reserveY: 0 as BigInt
                volumeX: 0 as BigInt
                volumeY: 0 as BigInt
                totalValueLockedAvax: 0 as BigInt
                totalValueLockedUSD: 0 as BigInt
                tokenXPrice: 0 as BigInt
                tokenYPrice: 0 as BigInt
                tokenXPriceUSD: 0 as BigInt
                tokenYPriceUSD: 0 as BigInt
                volumeTokenX: 0 as BigInt
                volumeTokenY: 0 as BigInt
                untrackedVolumeUSD: 0 as BigInt
                ignored: false as Boolean
                txCount: 0 as BigInt
                feesTokenX: 0 as BigInt
                feesTokenY: 0 as BigInt
                feesUSD: 0 as BigInt
                liquidityProviderCount: 0 as BigInt
                timestamp: clock.timestamp as String
                block: clock.number as BigInt
            }
        );
    }
}
method graph_create_swaps(pair_swaps) {
    for swap in swaps {
        // make swaps
    }
}
method graph_create_users(unique_users) {
    let deltas = unique_users.deltas ?? [];
    for delta in deltas {
        let id = delta.key;
        this.push(
                update User id {
                }
        );
    }
}
method graph_create_bin() {
    let id = "pair#bin_id";
    let split = id.split("#");
    let pair = id[0];
    this.push(
        new Bin id {
            binId: split[1],
            lbPair: split[0],
            priceX: 1 as BigDecimal
            priceY: "69" as BigDecimal
        }
    );
}
method graph_update_bin_data(bin_reserves, bin_total_supply) {
    let deltas = bin_reserves.deltas;
    for delta in deltas {
        let split = delta.key.split(":");
        let id = split[0];
        let token = split[1];

        let value = delta.new_value;

        switch token {
            "x" => {
                this.push(
                    update Bin id {
                        reserveX: value as BigInt
                    }
                );
            }
            "y" => {
                this.push(
                    update Bin id {
                        reserveY: value as BigInt
                    }
                );
            }
        }
    }

    let deltas = bin_total_supply.deltas;
    for delta in deltas {
        let id = delta.key;
        let value = delta.new_value;
        this.push(
            update Bin id {
                totalSupply: value as BigInt
            }
        );
    }
}
method graph_update_pair_count(store) {
    let id = global::FACTORY_ADDRESS;
    let count = store.deltas.len();

    if count > 0 {
        let pair_count = store.deltas[count - 1].new_value;

        this.push(
            update LbFactory id {
                pairCount: count.to_string() as BigInt
            }
        );
    }
}
method graph_update_avax_volume(avax_volume) {
    let id = global::FACTORY_ADDRESS;
    let volume = avax_volume.get("AVAX_VOLUME");
    this.push(
        update LbFactory id {
                volumeAVAX: volume as BigInt
        }
    );
}
method graph_update_usd_volume(avax_volume) {
    let id = global::FACTORY_ADDRESS;
    let volume = avax_volume.get("AVAX_VOLUME");
    let avax_price_usd = get_avax_price_usd(global::WAVAX_ADDRESS);
    let usd_volume = volume * avax_price_usd;
    this.push(
        update LbFactory id {
                volumeUSD: usd_volume as BigInt
        }
    );
}
method graph_update_tx_counts(tx_counts) {
    let deltas = tx_counts.deltas;
    for delta in deltas {
        let kind = delta.key.sub_string(0,2);
        let id = delta.key.sub_string(2);
        debug(`ID: \n ${id}`);
        let value = delta.new_value;
        // updating a pair
        let change = switch kind {
            "p:" => {
                update LbPair id {
                    txCount: value as BigInt
                }
            }
            "t:" => {
                update Token id {
                    txCount: value as BigInt
                }
            }
            "f:" => {
                update Factory id {
                    txCount: value as BigInt
                }
            }
        };

        this.push(change);
    }
}
method graph_update_token_prices(token_prices) {
    let deltas = token_prices.deltas;
    for delta in deltas {
        let id = delta.key;
        let old_value = delta.old_value;
        let value = delta.new_value;


        if old_value != value {
            // update the token price for the LbPair
            let price = value.usd_price;
            this.push(
                // if the key x is set, it's token x in the pair
                if value.contains("x") {
                    update LbPair value.x {
                        tokenXPriceUSD: price as BigInt
                    }
                } else { // otherwise it's token y
                    update LbPair value.y {
                        tokenYPriceUSD: price as BigInt
                    }
                }
            );
            this.push(
                update Token id {
                    derivedAvax: value.native as BigInt
                }
            );
        }
    }

    if deltas.len() > 0 {
        let id = "1";
        this.push(
            update Bundle id {
                avaxPriceUSD: get_avax_price_usd() as BigInt
            }
        );
    }

}
method graph_update_user_count(user_count) {
    let deltas = user_count.deltas ?? [];
    if deltas.len() > 0 {
        let last_delta = deltas.get_last();
        let id = global::FACTORY_ADDRESS;
        this.push(
            update LbFactory id {
                userCount: count as BigInt
            }
        );
    }
}
method graph_update_pair_reserves(reserves) {
    for delta in reserves.deltas {
        let split = delta.key.split(":");
        let id = split[0];
        let token = split[1];

        let value = delta.new_value;

        switch token {
            "x" => {
                this.push(
                    update LbPair id {
                        reserveX: value as BigInt
                    }
                );
            }
            "y" => {
                this.push(
                    update LbPair id {
                        reserveY: value as BigInt
                    }
                );
            }
        }
    }
}
method graph_update_pair_volume(volume) {
    for delta in volume.deltas {
        let split = delta.key.split(":");
        let id = split[0];
        let token = split[1];

        let value = delta.new_value;

        switch token {
            "x" => {
                this.push(
                    update LbPair id {
                        volumeX: value as BigInt
                    }
                );
            }
            "y" => {
                this.push(
                    update LbPair id {
                        volumeY: value as BigInt
                    }
                );
            }
        }
    }
}
method graph_set_ignored_pairs(pairs) {
    let pairs = pairs.deltas ?? [];
    for pair in pairs {
        let id = pair.key;
        let value = pair.newValue;
        this.push(
                update LbPair id {
                    ignored: value as Boolean
                }
        );
    }
}
